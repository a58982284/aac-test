# This is a basic workflow to help you get started with Actions

name: Terraform Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  apic_url: "${{ secrets.TF_VAR_APIC_URL }}"
  apic_user: "${{ secrets.TF_VAR_APIC_USER }}"
  apic_pwd: "${{ secrets.TF_VAR_APIC_PWD }}"

permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  terraform:
    name: 'Terraform'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: developement

    defaults:
      run:
        shell: bash

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out repository code
        uses: actions/checkout@v4
          
      - name: Install jq tool
        run: |
          sudo apt-get update
          sudo apt-get install jq

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.3"

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate -no-color

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan --no-color  -var 'apic_user=${{ apic_user }}' -var 'apic_pwd=${{ apic_pwd }}' -var 'apic_url=${{ apic_url }}'
      - run: echo ${{ steps.plan.outputs.stdout }}
      - run: echo ${{ steps.plan.outputs.stderr }}
      - run: echo ${{ steps.plan.outputs.exitcode }}
